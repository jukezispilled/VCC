{"ast":null,"code":"import { Router } from 'express';\nimport jwt from 'jsonwebtoken';\nconst {\n  sign\n} = jwt;\nimport User from '../models/User.js';\nimport requireRole from '../middleware/requireRole.js';\nimport mongoose from 'mongoose';\nimport nodemailer from 'nodemailer';\nconst router = Router();\nconst secretKey = 'your-secret-key';\n\n// Generate JWT\nfunction generateJWT(user) {\n  const payload = {\n    userId: user._id,\n    role: user.role\n  };\n  const options = {\n    expiresIn: '1h'\n  };\n  return sign(payload, secretKey, options);\n}\n\n// User registration endpoint\nrouter.post('/register', async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  try {\n    // Create a new user\n    const user = new User({\n      name,\n      email,\n      password\n    });\n\n    // Save the user to the database\n    await user.save();\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error('Failed to register user:', error);\n    res.status(500).json({\n      message: 'Failed to register user'\n    });\n  }\n});\nrouter.post('/send-email', async (req, res) => {\n  try {\n    const {\n      name,\n      phone,\n      address,\n      email,\n      workExperience,\n      resume\n    } = req.body;\n\n    // Create a Nodemailer transporter\n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      // Replace with your SMTP server address\n      auth: {\n        user: 'jax46500@gmail.com',\n        // Replace with your SMTP username\n        pass: 'uqdjdatfyjqzkaoo' // Replace with your SMTP password\n      }\n    });\n\n    // Define the email content\n    const mailOptions = {\n      from: 'whotfisjax@gmail.com',\n      to: 'jax46500@gmail.com',\n      subject: 'New Employment Form Submission',\n      html: `\n        <p>Name: ${name}</p>\n        <p>Phone: ${phone}</p>\n        <p>Address: ${address}</p>\n        <p>Email: ${email}</p>\n        <p>Work Experience: ${workExperience}</p>\n      `\n      /*\n      attachments: [\n        {\n          filename: resume.filename, // Use \"filename\" instead of \"originalname\"\n          content: resume.buffer,\n        },\n      ],\n      */\n    };\n\n    // Send the email\n    await transporter.sendMail(mailOptions);\n    res.status(200).json({\n      message: 'Email sent successfully!'\n    });\n  } catch (error) {\n    console.error('Error sending email:', error);\n    res.status(500).json({\n      message: 'Failed to send email.'\n    });\n  }\n});\n\n// User login endpoint\nrouter.post('/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    // Get the MongoDB collection directly\n    const collection = mongoose.connection.db.collection('users');\n\n    // Find the user by email\n    const user = await collection.findOne({\n      email\n    });\n\n    // If user not found, return error\n    if (!user) {\n      console.error('User not found');\n      res.status(404).json({\n        message: 'User not found'\n      });\n      return;\n    }\n\n    // Check if the password matches\n    const passwordMatches = user.password === password;\n\n    // If password doesn't match, return error\n    if (!passwordMatches) {\n      console.error('Wrong password');\n      res.status(401).json({\n        message: 'Wrong password'\n      });\n      return;\n    }\n\n    // Generate and send the JWT\n    const token = generateJWT(user);\n    res.status(200).json({\n      token\n    });\n  } catch (error) {\n    console.error('Failed to log in:', error);\n    res.status(500).json({\n      message: 'Failed to log in'\n    });\n  }\n});\n\n// Admin-only route\nrouter.get('/admin/dashboard', requireRole('admin'), (req, res) => {\n  // Handle admin dashboard logic here\n  res.json({\n    message: 'Admin dashboard'\n  });\n});\n\n// General user route\nrouter.get('/profile', requireRole('general'), (req, res) => {\n  // Handle general user profile logic here\n  res.json({\n    message: 'General user profile'\n  });\n});\nexport default router;","map":{"version":3,"names":["Router","jwt","sign","User","requireRole","mongoose","nodemailer","router","secretKey","generateJWT","user","payload","userId","_id","role","options","expiresIn","post","req","res","name","email","password","body","save","status","json","message","error","console","phone","address","workExperience","resume","transporter","createTransport","service","auth","pass","mailOptions","from","to","subject","html","sendMail","collection","connection","db","findOne","passwordMatches","token","get"],"sources":["/Users/jukezispilled/VCC/src/pages/Employment.js"],"sourcesContent":["import { Router } from 'express';\nimport jwt from 'jsonwebtoken';\nconst { sign } = jwt;\nimport User from '../models/User.js';\nimport requireRole from '../middleware/requireRole.js';\nimport mongoose from 'mongoose';\nimport nodemailer from 'nodemailer';\n\nconst router = Router();\nconst secretKey = 'your-secret-key';\n\n// Generate JWT\nfunction generateJWT(user) {\n  const payload = {\n    userId: user._id,\n    role: user.role,\n  };\n\n  const options = {\n    expiresIn: '1h',\n  };\n\n  return sign(payload, secretKey, options);\n}\n\n// User registration endpoint\nrouter.post('/register', async (req, res) => {\n  const { name, email, password } = req.body;\n\n  try {\n    // Create a new user\n    const user = new User({\n      name,\n      email,\n      password,\n    });\n\n    // Save the user to the database\n    await user.save();\n\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    console.error('Failed to register user:', error);\n    res.status(500).json({ message: 'Failed to register user' });\n  }\n});\n\nrouter.post('/send-email', async (req, res) => {\n  try {\n    const { name, phone, address, email, workExperience, resume } = req.body;\n\n    // Create a Nodemailer transporter\n    const transporter = nodemailer.createTransport({\n      service: 'gmail', // Replace with your SMTP server address\n      auth: {\n        user: 'jax46500@gmail.com', // Replace with your SMTP username\n        pass: 'uqdjdatfyjqzkaoo', // Replace with your SMTP password\n      },\n    });    \n\n    // Define the email content\n    const mailOptions = {\n      from: 'whotfisjax@gmail.com',\n      to: 'jax46500@gmail.com',\n      subject: 'New Employment Form Submission',\n      html: `\n        <p>Name: ${name}</p>\n        <p>Phone: ${phone}</p>\n        <p>Address: ${address}</p>\n        <p>Email: ${email}</p>\n        <p>Work Experience: ${workExperience}</p>\n      `,\n      /*\n      attachments: [\n        {\n          filename: resume.filename, // Use \"filename\" instead of \"originalname\"\n          content: resume.buffer,\n        },\n      ],\n      */\n    };\n\n    // Send the email\n    await transporter.sendMail(mailOptions);\n\n    res.status(200).json({ message: 'Email sent successfully!' });\n  } catch (error) {\n    console.error('Error sending email:', error);\n    res.status(500).json({ message: 'Failed to send email.' });\n  }\n});\n\n// User login endpoint\nrouter.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    // Get the MongoDB collection directly\n    const collection = mongoose.connection.db.collection('users');\n\n    // Find the user by email\n    const user = await collection.findOne({ email });\n\n    // If user not found, return error\n    if (!user) {\n      console.error('User not found');\n      res.status(404).json({ message: 'User not found' });\n      return;\n    }\n\n    // Check if the password matches\n    const passwordMatches = user.password === password;\n\n    // If password doesn't match, return error\n    if (!passwordMatches) {\n      console.error('Wrong password');\n      res.status(401).json({ message: 'Wrong password' });\n      return;\n    }\n\n    // Generate and send the JWT\n    const token = generateJWT(user);\n    res.status(200).json({ token });\n  } catch (error) {\n    console.error('Failed to log in:', error);\n    res.status(500).json({ message: 'Failed to log in' });\n  }\n});\n\n// Admin-only route\nrouter.get('/admin/dashboard', requireRole('admin'), (req, res) => {\n  // Handle admin dashboard logic here\n  res.json({ message: 'Admin dashboard' });\n});\n\n// General user route\nrouter.get('/profile', requireRole('general'), (req, res) => {\n  // Handle general user profile logic here\n  res.json({ message: 'General user profile' });\n});\n\nexport default router;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}